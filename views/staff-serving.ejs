<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Staff Serving - Satkhira Medical College</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/axios@1.4.0/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/animejs@3.2.1/lib/anime.min.js"></script>
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background: linear-gradient(135deg, #e0f7fa, #b2ebf2);
            margin: 0;
            overflow-x: hidden;
        }
        .header {
            background: #ffffff;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            animation: slideDown 0.5s ease-out;
        }
        @keyframes slideDown { from { transform: translateY(-100%); opacity: 0; } to { transform: translateY(0); opacity: 1; } }
        .card {
            background: #ffffff;
            border-radius: 12px;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .card:hover { transform: translateY(-4px); box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15); }
        .btn {
            position: relative;
            overflow: hidden;
            transition: transform 0.2s ease, background-color 0.3s ease;
            border-radius: 8px;
        }
        .btn:hover { transform: scale(1.05); }
        .btn:active { transform: scale(0.95); }
        .btn::after {
            content: '';
            position: absolute;
            background: rgba(255, 255, 255, 0.4);
            width: 100px;
            height: 100px;
            border-radius: 50%;
            transform: scale(0);
            top: 50%;
            left: 50%;
            margin: -50px 0 0 -50px;
            transition: transform 0.4s ease;
        }
        .btn:active::after { transform: scale(2); transition: 0s; }
        .btn-green { background: linear-gradient(45deg, #4caf50, #66bb6a); color: white; }
        .btn-green:hover { background: linear-gradient(45deg, #43a047, #4caf50); }
        .btn-blue { background: linear-gradient(45deg, #2196f3, #42a5f5); color: white; }
        .btn-blue:hover { background: linear-gradient(45deg, #1e88e5, #2196f3); }
        .btn-disabled { background: #e0e0e0; color: #9e9e9e; cursor: not-allowed; transform: none !important; }
        .select, .date-input, .search-input {
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            padding: 10px;
            background: #fafafa;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }
        .select:focus, .date-input:focus, .search-input:focus {
            border-color: #2196f3;
            box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.2);
            outline: none;
        }
        .table-container { max-height: 600px; overflow-y: auto; border-radius: 12px; background: #ffffff; }
        .table th { background: #f5f5f5; position: sticky; top: 0; z-index: 10; padding: 16px; font-weight: 600; color: #424242; border-bottom: 2px solid #e0e0e0; }
        .table tr { transition: background-color 0.3s ease, transform 0.2s ease; }
        .table tr:hover { background: #f9f9f9; transform: translateX(4px); }
        .error { color: #d32f2f; font-size: 0.9rem; animation: shake 0.3s ease; }
        @keyframes shake { 0%, 100% { transform: translateX(0); } 25% { transform: translateX(-4px); } 75% { transform: translateX(4px); } }
        .popup { display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: #ffffff; border-radius: 12px; box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2); padding: 20px; z-index: 40; animation: popIn 0.3s ease-out; }
        @keyframes popIn { from { transform: translate(-50%, -50%) scale(0.8); opacity: 0; } to { transform: translate(-50%, -50%) scale(1); opacity: 1; } }
        .popup-overlay { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 30; }
        .off-meal-option { padding: 12px; cursor: pointer; transition: background-color 0.2s ease, transform 0.2s ease; }
        .off-meal-option:hover { background: #f3f3f3; transform: translateX(4px); }
        .meal-off { color: #d32f2f; font-weight: 600; animation: pulse 1.5s infinite; }
        @keyframes pulse { 0% { transform: scale(1); } 50% { transform: scale(1.05); } 100% { transform: scale(1); } }
        .off-users-list { max-height: 250px; overflow-y: auto; border: 2px solid #e0e0e0; border-radius: 8px; padding: 12px; background: #fafafa; }
        .animate-pop { animation: popIn 0.3s ease-out; }
        @media (max-width: 768px) {
            .filters { flex-direction: column; gap: 12px; }
            .table-container { overflow-x: auto; }
            .table { min-width: 800px; }
            .card { padding: 12px; }
        }
    </style>
</head>
<body>
    <!-- Audio tags commented out temporarily to avoid errors -->
    <!-- <audio id="clickSound" src="/sounds/button-click.mp3"></audio>
    <audio id="successSound" src="/sounds/success.mp3"></audio>
    <audio id="popSound" src="/sounds/pop.mp3"></audio>
    <audio id="errorSound" src="/sounds/error.mp3"></audio> -->

    <header class="header py-4">
        <div class="container mx-auto px-4 flex justify-between items-center">
            <div class="flex items-center space-x-3">
                <span class="material-icons text-3xl text-blue-600 animate-spin-slow">restaurant_menu</span>
                <h1 class="text-2xl font-semibold text-gray-800">Satkhira Medical College Staff Serving</h1>
            </div>
            <a href="/logout" class="btn bg-red-500 text-white px-5 py-2 rounded-md text-sm hover:bg-red-600">Logout</a>
        </div>
    </header>

    <div class="container mx-auto px-4 py-8">
        <div class="card p-6 mb-8 animate-card">
            <h2 class="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                <span class="material-icons mr-2">filter_list</span> Filter Users
            </h2>
            <form class="filters flex flex-wrap gap-4" action="/staff/serving" method="GET">
                <div class="flex-1 min-w-[160px]">
                    <select name="batch" class="select w-full">
                        <option value="all">All Batches</option>
                        <% batches.forEach(batch => { %>
                            <option value="<%= batch %>" <%= selectedBatch === batch ? 'selected' : '' %>><%= batch %></option>
                        <% }) %>
                    </select>
                </div>
                <div class="flex-1 min-w-[160px]">
                    <select name="gender" class="select w-full">
                        <option value="all">All Genders</option>
                        <% genders.forEach(gender => { %>
                            <option value="<%= gender %>" <%= selectedGender === gender ? 'selected' : '' %>><%= gender %></option>
                        <% }) %>
                    </select>
                </div>
                <div class="flex-1 min-w-[160px]">
                    <input type="date" name="date" value="<%= selectedDate %>" class="date-input w-full" required>
                </div>
                <button type="submit" class="btn btn-blue px-5 py-2 rounded-md flex items-center">
                    <span class="material-icons mr-2">search</span> Apply Filters
                </button>
            </form>
        </div>

        <div class="card p-6 mb-8 animate-card" id="extraMealSection">
            <h2 class="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                <span class="material-icons mr-2">add_circle</span> Enable Extra Meals
            </h2>
            <p class="text-sm text-gray-600 mb-4">Total Users: <span id="totalUsersCount" class="font-semibold">0</span></p>
            <div class="search-container mb-4">
                <input type="text" id="userSearch" class="search-input w-full" placeholder="Search by name..." oninput="searchUsers()">
            </div>
            <div class="off-users-list mb-4" id="offUsersList"></div>
        </div>

        <div class="card p-6 animate-card">
            <h2 class="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                <span class="material-icons mr-2">dining</span> Serve Meals
            </h2>
            <div class="table-container">
                <table class="table w-full text-sm text-gray-700">
                    <thead>
                        <tr>
                            <th>Roll</th>
                            <th>Name</th>
                            <th>Additional Items</th>
                            <th>Meal</th>
                            <th>Lunch Served</th>
                            <th>Dinner Served</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="userTableBody">
                        <% users.forEach(user => { %>
                            <% const mealHistory = mealHistories.find(mh => mh.userId.toString() === user._id.toString()); %>
                            <tr class="animate-row" data-user-id="<%= user._id %>">
                                <td class="px-4 py-3"><%= user.classRoll %></td>
                                <td class="px-4 py-3"><%= user.name %></td>
                                <td class="px-4 py-3">
                                    <%= mealHistory ? mealHistory.additionalItems.map(item => item === 'Off' ? 'Egg (Poultry)' : item).join(', ') || '-' : '-' %>
                                </td>
                                <td class="px-4 py-3 <%= mealHistory && mealHistory.meal === 'Off' ? 'meal-off' : '' %>">
                                    <%= mealHistory ? (mealHistory.isExtra ? `${mealHistory.meal} (Extra)` : mealHistory.meal) : 'Off' %>
                                </td>
                                <td class="px-4 py-3">
                                    <%= mealHistory && mealHistory.lunchServed ? 'Yes' : 'No' %>
                                </td>
                                <td class="px-4 py-3">
                                    <%= mealHistory && mealHistory.dinnerServed ? 'Yes' : 'No' %>
                                </td>
                                <td class="px-4 py-3 flex gap-2">
                                    <% if (mealHistory && ['Lunch', 'Both'].includes(mealHistory.meal) && !mealHistory.lunchServed) { %>
                                        <button onclick="serveMeal('<%= user._id %>', 'Lunch', '<%= selectedDate %>')" class="btn btn-green px-3 py-1 rounded-md text-xs">
                                            Serve Lunch
                                        </button>
                                    <% } %>
                                    <% if (mealHistory && ['Dinner', 'Both'].includes(mealHistory.meal) && !mealHistory.dinnerServed) { %>
                                        <button onclick="serveMeal('<%= user._id %>', 'Dinner', '<%= selectedDate %>')" class="btn btn-blue px-3 py-1 rounded-md text-xs">
                                            Serve Dinner
                                        </button>
                                    <% } %>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>
            <p class="text-sm text-gray-600 mt-4">Total Meal Count: <span id="totalMealCount" class="font-semibold">0</span></p>
        </div>

        <div class="popup-overlay" id="popupOverlay" onclick="closePopup()"></div>
        <div class="popup" id="popup">
            <h3 class="text-lg font-semibold text-gray-800 mb-4">Enable Extra Meal for <span id="popupUserName"></span></h3>
            <div id="offMealOptions"></div>
            <button class="btn btn-blue px-4 py-2 mt-4" onclick="closePopup()">Close</button>
        </div>
    </div>

    <script>
        let canPlaySound = false;

        function playSound(soundId) {
            if (canPlaySound) {
                const sound = document.getElementById(soundId);
                if (sound) {
                    sound.currentTime = 0;
                    sound.play().catch(err => console.error('Error playing sound:', err));
                }
            }
        }

        document.addEventListener('click', () => {
            canPlaySound = true;
        }, { once: true });

        anime({
            targets: '.animate-card',
            translateY: [50, 0],
            opacity: [0, 1],
            delay: anime.stagger(100),
            duration: 800,
            easing: 'easeOutQuad'
        });

        anime({
            targets: '.animate-row',
            translateX: [-20, 0],
            opacity: [0, 1],
            delay: anime.stagger(50),
            duration: 600,
            easing: 'easeOutQuad'
        });

        let allUsersCache = [];

        async function fetchAllUsers() {
            try {
                const date = '<%= selectedDate %>';
                const batch = document.querySelector('select[name="batch"]').value;
                const gender = document.querySelector('select[name="gender"]').value;
                const response = await axios.get('/api/meal/all-users', { params: { date, batch, gender } });
                const allUsers = response.data;
                console.log('API Response for all-users:', response.data);
                if (!allUsers || !Array.isArray(allUsers)) {
                    throw new Error('API returned invalid or empty user data');
                }
                document.getElementById('totalUsersCount').textContent = allUsers.length;
                const offUsersList = document.getElementById('offUsersList');
                offUsersList.innerHTML = allUsers.length ? allUsers.map(user => `
                    <div class="flex justify-between items-center p-3 border-b border-gray-200 clickable animate-pop" data-user-id="${user._id}" data-name="${user.name}" data-off-meals='${JSON.stringify(user.offMeals || [])}'>
                        <span>${user.name} (Roll: ${user.classRoll})</span>
                    </div>
                `).join('') : '<p class="text-gray-500 text-center">No users found</p>';
                allUsersCache = allUsers;
                attachClickEvents();
            } catch (err) {
                console.error('Error fetching all users:', err.message, err.response ? err.response.data : 'No response data');
                document.getElementById('offUsersList').innerHTML = '<p class="text-gray-500 text-center">Error loading users: ' + (err.message || 'Unknown error') + '</p>';
                showError('Failed to load users: ' + (err.message || 'Check server logs'));
            }
        }

        function attachClickEvents() {
            const clickableElements = document.querySelectorAll('.clickable');
            clickableElements.forEach(element => {
                element.onclick = () => {
                    const userId = element.getAttribute('data-user-id');
                    const name = element.getAttribute('data-name');
                    const offMeals = JSON.parse(element.getAttribute('data-off-meals') || '[]');
                    showPopup(userId, name, offMeals);
                };
            });
        }

        function showPopup(userId, name, offMeals) {
            const popup = document.getElementById('popup');
            const popupOverlay = document.getElementById('popupOverlay');
            const offMealOptions = document.getElementById('offMealOptions');
            document.getElementById('popupUserName').textContent = name;
            offMealOptions.innerHTML = offMeals.length ? offMeals.map(meal => `
                <div class="off-meal-option flex justify-between items-center mb-2">
                    <span>${meal} (Off)</span>
                    <button class="btn btn-green px-3 py-1 text-xs" onclick="enableExtraMeal('${userId}', '${meal}', '${name}')">On</button>
                </div>
            `).join('') : '<p class="text-gray-500">No meals off</p>';
            popup.style.display = 'block';
            popupOverlay.style.display = 'block';
            anime({
                targets: popup,
                scale: [0.8, 1],
                opacity: [0, 1],
                duration: 300,
                easing: 'easeOutQuad'
            });
        }

        function closePopup() {
            const popup = document.getElementById('popup');
            const popupOverlay = document.getElementById('popupOverlay');
            anime({
                targets: popup,
                scale: [1, 0.8],
                opacity: [1, 0],
                duration: 300,
                easing: 'easeInQuad',
                complete: () => {
                    popup.style.display = 'none';
                    popupOverlay.style.display = 'none';
                }
            });
        }

        async function enableExtraMeal(userId, mealType, name) {
            try {
                const date = '<%= selectedDate %>';
                const response = await axios.post('/api/meal/extra-specific', { userId, mealType, date });
                showSuccess(`Extra ${mealType} enabled for ${name}!`);
                const row = document.querySelector(`tr[data-user-id="${userId}"]`);
                if (row) {
                    const mealCell = row.cells[3];
                    const currentMeal = mealCell.textContent.replace(' (Extra)', '');
                    mealCell.textContent = currentMeal === 'Off' ? `${mealType} (Extra)` :
                                          currentMeal === 'Lunch' && mealType === 'Dinner' ? 'Both (Extra)' :
                                          currentMeal === 'Dinner' && mealType === 'Lunch' ? 'Both (Extra)' : `${currentMeal} (Extra)`;
                    if (['Lunch', 'Both'].includes(mealType) && !row.cells[4].textContent.includes('Yes')) {
                        row.cells[6].innerHTML += `<button onclick="serveMeal('${userId}', 'Lunch', '${date}')" class="btn btn-green px-3 py-1 rounded-md text-xs">Serve Lunch</button>`;
                    }
                    if (['Dinner', 'Both'].includes(mealType) && !row.cells[5].textContent.includes('Yes')) {
                        row.cells[6].innerHTML += `<button onclick="serveMeal('${userId}', 'Dinner', '${date}')" class="btn btn-blue px-3 py-1 rounded-md text-xs">Serve Dinner</button>`;
                    }
                    anime({
                        targets: row,
                        backgroundColor: ['#e0f7fa', '#ffffff'],
                        duration: 1000,
                        easing: 'easeOutQuad'
                    });
                }
                closePopup();
                await fetchAllUsers();
                updateTotalMealCount();
            } catch (err) {
                console.error(`Error enabling ${mealType}:`, err);
                showError(`Failed to enable ${mealType}`);
            }
        }

        function searchUsers() {
            const query = document.getElementById('userSearch').value.toLowerCase();
            const offUsersList = document.getElementById('offUsersList');
            if (query.length < 2) {
                offUsersList.innerHTML = allUsersCache.length ? allUsersCache.map(user => `
                    <div class="flex justify-between items-center p-3 border-b border-gray-200 clickable animate-pop" data-user-id="${user._id}" data-name="${user.name}" data-off-meals='${JSON.stringify(user.offMeals || [])}'>
                        <span>${user.name} (Roll: ${user.classRoll})</span>
                    </div>
                `).join('') : '<p class="text-gray-500 text-center">No users found</p>';
            } else {
                const filteredUsers = allUsersCache.filter(user => user.name.toLowerCase().includes(query));
                offUsersList.innerHTML = filteredUsers.length ? filteredUsers.map(user => `
                    <div class="flex justify-between items-center p-3 border-b border-gray-200 clickable animate-pop" data-user-id="${user._id}" data-name="${user.name}" data-off-meals='${JSON.stringify(user.offMeals || [])}'>
                        <span>${user.name} (Roll: ${user.classRoll})</span>
                    </div>
                `).join('') : '<p class="text-gray-500 text-center">No users found</p>';
            }
            attachClickEvents();
        }

        async function serveMeal(userId, mealType, date) {
            try {
                const response = await axios.post(`/api/meal/serve/${userId}`, { mealType, date });
                const button = event.target;
                button.classList.add('btn-disabled');
                button.disabled = true;
                button.textContent = `${mealType} Served`;
                const row = button.closest('tr');
                row.cells[mealType === 'Lunch' ? 4 : 5].textContent = 'Yes';
                showSuccess(`${mealType} served successfully!`);
                anime({
                    targets: row,
                    backgroundColor: ['#e0f7fa', '#ffffff'],
                    duration: 1000,
                    easing: 'easeOutQuad'
                });
                updateTotalMealCount();
            } catch (err) {
                console.error(`Error serving ${mealType}:`, err);
                showError(`Failed to serve ${mealType}`);
            }
        }

        function updateTotalMealCount() {
            axios.get('/api/meal/total-count', { params: { date: '<%= selectedDate %>' } })
                .then(response => {
                    document.getElementById('totalMealCount').textContent = response.data.totalCount || 0;
                })
                .catch(err => {
                    console.error('Error fetching total meal count:', err);
                    showError('Failed to fetch total meal count');
                });
        }

        function showSuccess(message) {
            const div = document.createElement('div');
            div.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-md shadow-lg animate-slide-in';
            div.textContent = message;
            document.body.appendChild(div);
            anime({
                targets: div,
                translateX: [50, 0],
                opacity: [0, 1],
                duration: 500,
                easing: 'easeOutQuad'
            });
            setTimeout(() => {
                anime({
                    targets: div,
                    translateX: [0, 50],
                    opacity: [1, 0],
                    duration: 500,
                    easing: 'easeInQuad',
                    complete: () => div.remove()
                });
            }, 3000);
        }

        function showError(message) {
            const div = document.createElement('div');
            div.className = 'fixed top-4 right-4 bg-red-500 text-white px-4 py-2 rounded-md shadow-lg animate-slide-in';
            div.textContent = message;
            document.body.appendChild(div);
            anime({
                targets: div,
                translateX: [50, 0],
                opacity: [0, 1],
                duration: 500,
                easing: 'easeOutQuad'
            });
            setTimeout(() => {
                anime({
                    targets: div,
                    translateX: [0, 50],
                    opacity: [1, 0],
                    duration: 500,
                    easing: 'easeInQuad',
                    complete: () => div.remove()
                });
            }, 3000);
        }

        document.addEventListener('DOMContentLoaded', async () => {
            await fetchAllUsers();
        });

        document.getElementById('extraMealSection').addEventListener('click', () => {
            if (!document.getElementById('offUsersList').innerHTML.trim()) {
                fetchAllUsers();
            }
        });
    </script>
</body>
</html>